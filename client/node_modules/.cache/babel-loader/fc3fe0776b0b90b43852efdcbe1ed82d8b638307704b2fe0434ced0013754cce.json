{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Downloads\\\\chat-app\\\\client\\\\src\\\\components\\\\ChatArea.js\",\n  _s = $RefreshSig$();\n// import React, { useContext, useEffect, useRef, useState } from \"react\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import { IconButton } from \"@mui/material\";\n// import SendIcon from \"@mui/icons-material/Send\";\n// import MessageSelf from \"./MessageSelf\";\n// import MessageOthers from \"./MessageOthers\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { useParams } from \"react-router-dom\";\n// import Skeleton from \"@mui/material/Skeleton\";\n// import axios from \"axios\";\n// import { myContext } from \"./MainContainer\";\n// import { io } from \"socket.io-client\";\n\n// const ENDPOINT = \"http://localhost:8080\";\n\n// var socket, chat;\n// function ChatArea() {\n//   const lightTheme = useSelector((state) => state.themeKey);\n//   const [messageContent, setMessageContent] = useState(\"\");\n//   // const messagesEndRef = useRef(null);\n//   const dyParams = useParams();\n//   const [chat_id, chat_user] = dyParams._id.split(\"&\");\n//   // console.log(chat_id, chat_user);\n//   const userData = JSON.parse(localStorage.getItem(\"userData\"));\n//   const [allMessages, setAllMessages] = useState([]);\n//   const [ allMessagesCopy, setAllMessagesCopy ] = useState([]);\n//   // console.log(\"Chat area id : \", chat_id._id);\n//   // const refresh = useSelector((state) => state.refreshKey);\n//   const { refresh, setRefresh } = useContext(myContext);\n//   const [loaded, setloaded] = useState(false);\n//   const [ socketConnectionStatus, setConnectionStatus ] = useState(false);\n//   const sendMessage = () => {\n//     // console.log(\"SendMessage Fired to\", chat_id._id);\n//     var data = null;\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userData.data.token}`,\n//       },\n//     };\n//     axios\n//       .post(\n//         \"http://localhost:8080/message/\",\n//         {\n//           content: messageContent,\n//           chatId: chat_id,\n//         },\n//         config\n//       )\n//       .then(({ response }) => {\n//         data = response;\n//         console.log(\"Message Fired\");\n//       });\n//       socket.emit(\"newMessage\", data);\n//   };\n//   // const scrollToBottom = () => {\n//   //   messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   // };\n\n//   useEffect(() => {\n//     socket = io(ENDPOINT);\n//     socket.emit(\"setup\", userData);\n//     socket.on(\"connection\", () => {\n//       setConnectionStatus(!socketConnectionStatus);\n//     });\n//   }, []);\n\n//   useEffect(() => {\n//     socket.on(\"message recieved\", (newMessage) => {\n//       if (!allMessagesCopy || allMessagesCopy._id !== newMessage._id) {\n//         //setAllMessages([..allMessages], newMessage);\n//       } else {\n//         setAllMessages([...allMessages], newMessage);\n//       }\n//     })\n//   })\n\n//   useEffect(() => {\n//     // console.log(\"Users refreshed\");\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userData.data.token}`,\n//       },\n//     };\n//     axios\n//       .get(\"http://localhost:8080/message/\" + chat_id, config)\n//       .then(({ data }) => {\n//         setAllMessages(data);\n//         setloaded(true);\n//         socket.emit(\"join chat\", chat_id);\n//         // console.log(\"Data from Acess Chat API \", data);\n//       });\n//       setAllMessagesCopy(allMessages)\n//     // scrollToBottom();\n//   }, [refresh, chat_id, userData.data.token, allMessages]);\n\n//   if (!loaded) {\n//     return (\n//       <div\n//         style={{\n//           border: \"20px\",\n//           padding: \"10px\",\n//           width: \"100%\",\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           gap: \"10px\",\n//         }}\n//       >\n//         <Skeleton\n//           variant=\"rectangular\"\n//           sx={{ width: \"100%\", borderRadius: \"10px\" }}\n//           height={60}\n//         />\n//         <Skeleton\n//           variant=\"rectangular\"\n//           sx={{\n//             width: \"100%\",\n//             borderRadius: \"10px\",\n//             flexGrow: \"1\",\n//           }}\n//         />\n//         <Skeleton\n//           variant=\"rectangular\"\n//           sx={{ width: \"100%\", borderRadius: \"10px\" }}\n//           height={60}\n//         />\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div className={\"chatArea-container\" + (lightTheme ? \"\" : \" dark\")}>\n//         <div className={\"chatArea-header\" + (lightTheme ? \"\" : \" dark\")}>\n//           <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\n//             {chat_user[0]}\n//           </p>\n//           <div className={\"header-text\" + (lightTheme ? \"\" : \" dark\")}>\n//             <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\n//               {chat_user}\n//             </p>\n//             {/* <p className={\"con-timeStamp\" + (lightTheme ? \"\" : \" dark\")}>\n//               {props.timeStamp}\n//             </p> */}\n//           </div>\n//           <IconButton className={\"icon\" + (lightTheme ? \"\" : \" dark\")}>\n//             <DeleteIcon />\n//           </IconButton>\n//         </div>\n//         <div className={\"messages-container\" + (lightTheme ? \"\" : \" dark\")}>\n//           {allMessages\n//             .slice(0)\n//             .reverse()\n//             .map((message, index) => {\n//               const sender = message.sender;\n//               const self_id = userData.data._id;\n//               if (sender._id === self_id) {\n//                 // console.log(\"I sent it \");\n//                 return <MessageSelf props={message} key={index} />;\n//               } else {\n//                 // console.log(\"Someone Sent it\");\n//                 return <MessageOthers props={message} key={index} />;\n//               }\n//             })}\n//         </div>\n//         <div className=\"BOTTOM\" />\n//         <div className={\"text-input-area\" + (lightTheme ? \"\" : \" dark\")}>\n//           <input\n//             placeholder=\"Type a Message\"\n//             className={\"search-box\" + (lightTheme ? \"\" : \" dark\")}\n//             value={messageContent}\n//             onChange={(e) => {\n//               setMessageContent(e.target.value);\n//             }}\n//             onKeyDown={(event) => {\n//               if (event.code == \"Enter\") {\n//                 // console.log(event);\n//                 sendMessage();\n//                 setMessageContent(\"\");\n//                 setRefresh(!refresh);\n//               }\n//             }}\n//           />\n//           <IconButton\n//             className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\n//             onClick={() => {\n//               sendMessage();\n//               setRefresh(!refresh);\n//             }}\n//           >\n//             <SendIcon />\n//           </IconButton>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ChatArea;\n\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { IconButton } from \"@mui/material\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport MessageSelf from \"./MessageSelf\";\nimport MessageOthers from \"./MessageOthers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport axios from \"axios\";\nimport { myContext } from \"./MainContainer\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:8080\";\nvar socket, chat;\nfunction ChatArea() {\n  _s();\n  const lightTheme = useSelector(state => state.themeKey);\n  const [messageContent, setMessageContent] = useState(\"\");\n  const dyParams = useParams();\n  const [chat_id, chat_user] = dyParams._id.split(\"&\");\n  const userData = JSON.parse(localStorage.getItem(\"userData\"));\n  const [allMessages, setAllMessages] = useState([]);\n  const [allMessagesCopy, setAllMessagesCopy] = useState([]);\n  const {\n    refresh,\n    setRefresh\n  } = useContext(myContext);\n  const [loaded, setloaded] = useState(false);\n  const [socketConnectionStatus, setConnectionStatus] = useState(false);\n  const navigate = useNavigate();\n  const sendMessage = () => {\n    var data = null;\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userData.data.token}`\n      }\n    };\n    axios.post(\"http://localhost:8080/message/\", {\n      content: messageContent,\n      chatId: chat_id\n    }, config).then(({\n      response\n    }) => {\n      data = response;\n      console.log(\"Message Fired\");\n    });\n    socket.emit(\"newMessage\", data);\n  };\n  const deleteChatHandler = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${userData.data.token}`\n        }\n      };\n      await axios.delete(`http://localhost:8080/chat/${chat_id}`, config);\n      navigate(\"/app\"); // Or any other route you want to navigate to\n    } catch (error) {\n      console.error(\"Error deleting the chat:\", error);\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", userData);\n    socket.on(\"connection\", () => {\n      setConnectionStatus(!socketConnectionStatus);\n    });\n  }, []);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessage => {\n      if (!allMessagesCopy || allMessagesCopy._id !== newMessage._id) {\n        //setAllMessages([..allMessages], newMessage);\n      } else {\n        setAllMessages([...allMessages], newMessage);\n      }\n    });\n  });\n  useEffect(() => {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userData.data.token}`\n      }\n    };\n    axios.get(`http://localhost:8080/message/${chat_id}`, config).then(({\n      data\n    }) => {\n      setAllMessages(data);\n      setloaded(true);\n      socket.emit(\"join chat\", chat_id);\n    });\n    setAllMessagesCopy(allMessages);\n  }, [refresh, chat_id, userData.data.token, allMessages]);\n  if (!loaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"20px\",\n        padding: \"10px\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rectangular\",\n        sx: {\n          width: \"100%\",\n          borderRadius: \"10px\"\n        },\n        height: 60\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rectangular\",\n        sx: {\n          width: \"100%\",\n          borderRadius: \"10px\",\n          flexGrow: \"1\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rectangular\",\n        sx: {\n          width: \"100%\",\n          borderRadius: \"10px\"\n        },\n        height: 60\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatArea-container\" + (lightTheme ? \"\" : \" dark\"),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatArea-header\" + (lightTheme ? \"\" : \" dark\"),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"con-icon\" + (lightTheme ? \"\" : \" dark\"),\n          children: chat_user[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-text\" + (lightTheme ? \"\" : \" dark\"),\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"con-title\" + (lightTheme ? \"\" : \" dark\"),\n            children: chat_user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            className: \"icon\" + (lightTheme ? \"\" : \" dark\"),\n            onClick: deleteChatHandler,\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\" + (lightTheme ? \"\" : \" dark\"),\n        children: allMessages.slice(0).reverse().map((message, index) => {\n          const sender = message.sender;\n          const self_id = userData.data._id;\n          if (sender._id === self_id) {\n            return /*#__PURE__*/_jsxDEV(MessageSelf, {\n              props: message\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 24\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(MessageOthers, {\n              props: message\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 24\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BOTTOM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-input-area\" + (lightTheme ? \"\" : \" dark\"),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Type a Message\",\n          className: \"search-box\" + (lightTheme ? \"\" : \" dark\"),\n          value: messageContent,\n          onChange: e => {\n            setMessageContent(e.target.value);\n          },\n          onKeyDown: event => {\n            if (event.code == \"Enter\") {\n              sendMessage();\n              setMessageContent(\"\");\n              setRefresh(!refresh);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          className: \"icon\" + (lightTheme ? \"\" : \" dark\"),\n          onClick: () => {\n            sendMessage();\n            setRefresh(!refresh);\n          },\n          children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(ChatArea, \"mfkP7T9JfbC6+hhgwY7fgMD68YM=\", false, function () {\n  return [useSelector, useParams, useNavigate];\n});\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useContext","useEffect","useRef","useState","DeleteIcon","IconButton","SendIcon","MessageSelf","MessageOthers","useDispatch","useSelector","useParams","useNavigate","Skeleton","axios","myContext","io","jsxDEV","_jsxDEV","ENDPOINT","socket","chat","ChatArea","_s","lightTheme","state","themeKey","messageContent","setMessageContent","dyParams","chat_id","chat_user","_id","split","userData","JSON","parse","localStorage","getItem","allMessages","setAllMessages","allMessagesCopy","setAllMessagesCopy","refresh","setRefresh","loaded","setloaded","socketConnectionStatus","setConnectionStatus","navigate","sendMessage","data","config","headers","Authorization","token","post","content","chatId","then","response","console","log","emit","deleteChatHandler","delete","error","on","newMessage","get","style","border","padding","width","display","flexDirection","gap","children","variant","sx","borderRadius","height","fileName","_jsxFileName","lineNumber","columnNumber","flexGrow","className","onClick","slice","reverse","map","message","index","sender","self_id","props","placeholder","value","onChange","e","target","onKeyDown","event","code","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Downloads/chat-app/client/src/components/ChatArea.js"],"sourcesContent":["// import React, { useContext, useEffect, useRef, useState } from \"react\";\r\n// import DeleteIcon from \"@mui/icons-material/Delete\";\r\n// import { IconButton } from \"@mui/material\";\r\n// import SendIcon from \"@mui/icons-material/Send\";\r\n// import MessageSelf from \"./MessageSelf\";\r\n// import MessageOthers from \"./MessageOthers\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import Skeleton from \"@mui/material/Skeleton\";\r\n// import axios from \"axios\";\r\n// import { myContext } from \"./MainContainer\";\r\n// import { io } from \"socket.io-client\";\r\n\r\n// const ENDPOINT = \"http://localhost:8080\";\r\n\r\n// var socket, chat;\r\n// function ChatArea() {\r\n//   const lightTheme = useSelector((state) => state.themeKey);\r\n//   const [messageContent, setMessageContent] = useState(\"\");\r\n//   // const messagesEndRef = useRef(null);\r\n//   const dyParams = useParams();\r\n//   const [chat_id, chat_user] = dyParams._id.split(\"&\");\r\n//   // console.log(chat_id, chat_user);\r\n//   const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n//   const [allMessages, setAllMessages] = useState([]);\r\n//   const [ allMessagesCopy, setAllMessagesCopy ] = useState([]);\r\n//   // console.log(\"Chat area id : \", chat_id._id);\r\n//   // const refresh = useSelector((state) => state.refreshKey);\r\n//   const { refresh, setRefresh } = useContext(myContext);\r\n//   const [loaded, setloaded] = useState(false);\r\n//   const [ socketConnectionStatus, setConnectionStatus ] = useState(false);\r\n//   const sendMessage = () => {\r\n//     // console.log(\"SendMessage Fired to\", chat_id._id);\r\n//     var data = null;\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userData.data.token}`,\r\n//       },\r\n//     };\r\n//     axios\r\n//       .post(\r\n//         \"http://localhost:8080/message/\",\r\n//         {\r\n//           content: messageContent,\r\n//           chatId: chat_id,\r\n//         },\r\n//         config\r\n//       )\r\n//       .then(({ response }) => {\r\n//         data = response;\r\n//         console.log(\"Message Fired\");\r\n//       });\r\n//       socket.emit(\"newMessage\", data);\r\n//   };\r\n//   // const scrollToBottom = () => {\r\n//   //   messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//   // };\r\n\r\n//   useEffect(() => {\r\n//     socket = io(ENDPOINT);\r\n//     socket.emit(\"setup\", userData);\r\n//     socket.on(\"connection\", () => {\r\n//       setConnectionStatus(!socketConnectionStatus);\r\n//     });\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     socket.on(\"message recieved\", (newMessage) => {\r\n//       if (!allMessagesCopy || allMessagesCopy._id !== newMessage._id) {\r\n//         //setAllMessages([..allMessages], newMessage);\r\n//       } else {\r\n//         setAllMessages([...allMessages], newMessage);\r\n//       }\r\n//     })\r\n//   })\r\n\r\n//   useEffect(() => {\r\n//     // console.log(\"Users refreshed\");\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userData.data.token}`,\r\n//       },\r\n//     };\r\n//     axios\r\n//       .get(\"http://localhost:8080/message/\" + chat_id, config)\r\n//       .then(({ data }) => {\r\n//         setAllMessages(data);\r\n//         setloaded(true);\r\n//         socket.emit(\"join chat\", chat_id);\r\n//         // console.log(\"Data from Acess Chat API \", data);\r\n//       });\r\n//       setAllMessagesCopy(allMessages)\r\n//     // scrollToBottom();\r\n//   }, [refresh, chat_id, userData.data.token, allMessages]);\r\n\r\n//   if (!loaded) {\r\n//     return (\r\n//       <div\r\n//         style={{\r\n//           border: \"20px\",\r\n//           padding: \"10px\",\r\n//           width: \"100%\",\r\n//           display: \"flex\",\r\n//           flexDirection: \"column\",\r\n//           gap: \"10px\",\r\n//         }}\r\n//       >\r\n//         <Skeleton\r\n//           variant=\"rectangular\"\r\n//           sx={{ width: \"100%\", borderRadius: \"10px\" }}\r\n//           height={60}\r\n//         />\r\n//         <Skeleton\r\n//           variant=\"rectangular\"\r\n//           sx={{\r\n//             width: \"100%\",\r\n//             borderRadius: \"10px\",\r\n//             flexGrow: \"1\",\r\n//           }}\r\n//         />\r\n//         <Skeleton\r\n//           variant=\"rectangular\"\r\n//           sx={{ width: \"100%\", borderRadius: \"10px\" }}\r\n//           height={60}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   } else {\r\n//     return (\r\n//       <div className={\"chatArea-container\" + (lightTheme ? \"\" : \" dark\")}>\r\n//         <div className={\"chatArea-header\" + (lightTheme ? \"\" : \" dark\")}>\r\n//           <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\r\n//             {chat_user[0]}\r\n//           </p>\r\n//           <div className={\"header-text\" + (lightTheme ? \"\" : \" dark\")}>\r\n//             <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\r\n//               {chat_user}\r\n//             </p>\r\n//             {/* <p className={\"con-timeStamp\" + (lightTheme ? \"\" : \" dark\")}>\r\n//               {props.timeStamp}\r\n//             </p> */}\r\n//           </div>\r\n//           <IconButton className={\"icon\" + (lightTheme ? \"\" : \" dark\")}>\r\n//             <DeleteIcon />\r\n//           </IconButton>\r\n//         </div>\r\n//         <div className={\"messages-container\" + (lightTheme ? \"\" : \" dark\")}>\r\n//           {allMessages\r\n//             .slice(0)\r\n//             .reverse()\r\n//             .map((message, index) => {\r\n//               const sender = message.sender;\r\n//               const self_id = userData.data._id;\r\n//               if (sender._id === self_id) {\r\n//                 // console.log(\"I sent it \");\r\n//                 return <MessageSelf props={message} key={index} />;\r\n//               } else {\r\n//                 // console.log(\"Someone Sent it\");\r\n//                 return <MessageOthers props={message} key={index} />;\r\n//               }\r\n//             })}\r\n//         </div>\r\n//         <div className=\"BOTTOM\" />\r\n//         <div className={\"text-input-area\" + (lightTheme ? \"\" : \" dark\")}>\r\n//           <input\r\n//             placeholder=\"Type a Message\"\r\n//             className={\"search-box\" + (lightTheme ? \"\" : \" dark\")}\r\n//             value={messageContent}\r\n//             onChange={(e) => {\r\n//               setMessageContent(e.target.value);\r\n//             }}\r\n//             onKeyDown={(event) => {\r\n//               if (event.code == \"Enter\") {\r\n//                 // console.log(event);\r\n//                 sendMessage();\r\n//                 setMessageContent(\"\");\r\n//                 setRefresh(!refresh);\r\n//               }\r\n//             }}\r\n//           />\r\n//           <IconButton\r\n//             className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\r\n//             onClick={() => {\r\n//               sendMessage();\r\n//               setRefresh(!refresh);\r\n//             }}\r\n//           >\r\n//             <SendIcon />\r\n//           </IconButton>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ChatArea;\r\n\r\n\r\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport MessageSelf from \"./MessageSelf\";\r\nimport MessageOthers from \"./MessageOthers\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Skeleton from \"@mui/material/Skeleton\";\r\nimport axios from \"axios\";\r\nimport { myContext } from \"./MainContainer\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"http://localhost:8080\";\r\n\r\nvar socket, chat;\r\nfunction ChatArea() {\r\n  const lightTheme = useSelector((state) => state.themeKey);\r\n  const [messageContent, setMessageContent] = useState(\"\");\r\n  const dyParams = useParams();\r\n  const [chat_id, chat_user] = dyParams._id.split(\"&\");\r\n  const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n  const [allMessages, setAllMessages] = useState([]);\r\n  const [allMessagesCopy, setAllMessagesCopy] = useState([]);\r\n  const { refresh, setRefresh } = useContext(myContext);\r\n  const [loaded, setloaded] = useState(false);\r\n  const [socketConnectionStatus, setConnectionStatus] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const sendMessage = () => {\r\n    var data = null;\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userData.data.token}`,\r\n      },\r\n    };\r\n    axios\r\n      .post(\r\n        \"http://localhost:8080/message/\",\r\n        {\r\n          content: messageContent,\r\n          chatId: chat_id,\r\n        },\r\n        config\r\n      )\r\n      .then(({ response }) => {\r\n        data = response;\r\n        console.log(\"Message Fired\");\r\n      });\r\n    socket.emit(\"newMessage\", data);\r\n  };\r\n\r\n  const deleteChatHandler = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userData.data.token}`,\r\n        },\r\n      };\r\n\r\n      await axios.delete(`http://localhost:8080/chat/${chat_id}`, config);\r\n      navigate(\"/app\"); // Or any other route you want to navigate to\r\n    } catch (error) {\r\n      console.error(\"Error deleting the chat:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", userData);\r\n    socket.on(\"connection\", () => {\r\n      setConnectionStatus(!socketConnectionStatus);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessage) => {\r\n      if (!allMessagesCopy || allMessagesCopy._id !== newMessage._id) {\r\n        //setAllMessages([..allMessages], newMessage);\r\n      } else {\r\n        setAllMessages([...allMessages], newMessage);\r\n      }\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userData.data.token}`,\r\n      },\r\n    };\r\n    axios\r\n      .get(`http://localhost:8080/message/${chat_id}`, config)\r\n      .then(({ data }) => {\r\n        setAllMessages(data);\r\n        setloaded(true);\r\n        socket.emit(\"join chat\", chat_id);\r\n      });\r\n    setAllMessagesCopy(allMessages);\r\n  }, [refresh, chat_id, userData.data.token, allMessages]);\r\n\r\n  if (!loaded) {\r\n    return (\r\n      <div\r\n        style={{\r\n          border: \"20px\",\r\n          padding: \"10px\",\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          gap: \"10px\",\r\n        }}\r\n      >\r\n        <Skeleton\r\n          variant=\"rectangular\"\r\n          sx={{ width: \"100%\", borderRadius: \"10px\" }}\r\n          height={60}\r\n        />\r\n        <Skeleton\r\n          variant=\"rectangular\"\r\n          sx={{\r\n            width: \"100%\",\r\n            borderRadius: \"10px\",\r\n            flexGrow: \"1\",\r\n          }}\r\n        />\r\n        <Skeleton\r\n          variant=\"rectangular\"\r\n          sx={{ width: \"100%\", borderRadius: \"10px\" }}\r\n          height={60}\r\n        />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className={\"chatArea-container\" + (lightTheme ? \"\" : \" dark\")}>\r\n        <div className={\"chatArea-header\" + (lightTheme ? \"\" : \" dark\")}>\r\n          <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\r\n            {chat_user[0]}\r\n          </p>\r\n          <div className={\"header-text\" + (lightTheme ? \"\" : \" dark\")}>\r\n            <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\r\n              {chat_user}\r\n            </p>\r\n            <IconButton\r\n              className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\r\n              onClick={deleteChatHandler}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </div>\r\n        </div>\r\n        <div className={\"messages-container\" + (lightTheme ? \"\" : \" dark\")}>\r\n          {allMessages\r\n            .slice(0)\r\n            .reverse()\r\n            .map((message, index) => {\r\n              const sender = message.sender;\r\n              const self_id = userData.data._id;\r\n              if (sender._id === self_id) {\r\n                return <MessageSelf props={message} key={index} />;\r\n              } else {\r\n                return <MessageOthers props={message} key={index} />;\r\n              }\r\n            })}\r\n        </div>\r\n        <div className=\"BOTTOM\" />\r\n        <div className={\"text-input-area\" + (lightTheme ? \"\" : \" dark\")}>\r\n          <input\r\n            placeholder=\"Type a Message\"\r\n            className={\"search-box\" + (lightTheme ? \"\" : \" dark\")}\r\n            value={messageContent}\r\n            onChange={(e) => {\r\n              setMessageContent(e.target.value);\r\n            }}\r\n            onKeyDown={(event) => {\r\n              if (event.code == \"Enter\") {\r\n                sendMessage();\r\n                setMessageContent(\"\");\r\n                setRefresh(!refresh);\r\n              }\r\n            }}\r\n          />\r\n          <IconButton\r\n            className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\r\n            onClick={() => {\r\n              sendMessage();\r\n              setRefresh(!refresh);\r\n            }}\r\n          >\r\n            <SendIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatArea;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACtE,OAAOC,UAAU,MAAM,4BAA4B;AACnD,SAASC,UAAU,QAAQ,eAAe;AAC1C,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,a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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}