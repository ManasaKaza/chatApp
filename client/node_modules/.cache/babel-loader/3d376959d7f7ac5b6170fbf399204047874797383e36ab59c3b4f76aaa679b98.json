{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Downloads\\\\chat-app\\\\client\\\\src\\\\components\\\\Sidebar.js\",\n  _s = $RefreshSig$();\n// import React, { useContext, useEffect, useState } from \"react\";\n// import AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\n// import { IconButton } from \"@mui/material\";\n// import PersonAddIcon from \"@mui/icons-material/PersonAdd\";\n// import GroupAddIcon from \"@mui/icons-material/GroupAdd\";\n// import NightlightIcon from \"@mui/icons-material/Nightlight\";\n// import LightModeIcon from \"@mui/icons-material/LightMode\";\n// import ExitToAppIcon from \"@mui/icons-material/ExitToApp\";\n// import AddCircleIcon from \"@mui/icons-material/AddCircle\";\n// import SearchIcon from \"@mui/icons-material/Search\";\n// import { useNavigate } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { toggleTheme } from \"../features/themeSlice\";\n// import axios from \"axios\";\n// import { refreshSidebarFun } from \"../features/refreshSidebar\";\n// import { myContext } from \"./MainContainer\";\n\n// function Sidebar() {\n//   const navigate = useNavigate();\n//   const dispatch = useDispatch();\n//   const lightTheme = useSelector((state) => state.themeKey);\n//   // const refresh = useSelector((state) => state.refreshKey);\n//   const { refresh, setRefresh } = useContext(myContext);\n//   console.log(\"Context API : refresh : \", refresh);\n//   const [conversations, setConversations] = useState([]);\n//   // console.log(\"Conversations of Sidebar : \", conversations);\n//   const userData = JSON.parse(localStorage.getItem(\"userData\"));\n//   // console.log(\"Data from LocalStorage : \", userData);\n//   const nav = useNavigate();\n//   if (!userData) {\n//     console.log(\"User not Authenticated\");\n//     nav(\"/\");\n//   }\n\n//   const user = userData.data;\n//   useEffect(() => {\n//     // console.log(\"Sidebar : \", user.token);\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${user.token}`,\n//       },\n//     };\n\n//     axios.get(\"http://localhost:8080/chat/\", config).then((response) => {\n//       console.log(\"Data refresh in sidebar \", response.data);\n//       setConversations(response.data);\n//       // setRefresh(!refresh);\n//     });\n//   }, [refresh]);\n\n//   return (\n//     <div className=\"sidebar-container\">\n//       <div className={\"sb-header\" + (lightTheme ? \"\" : \" dark\")}>\n//         <div className=\"other-icons\">\n//           <IconButton\n//             onClick={() => {\n//               nav(\"/app/welcome\");\n//             }}\n//           >\n//             <AccountCircleIcon\n//               className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\n//             />\n//           </IconButton>\n\n//           <IconButton\n//             onClick={() => {\n//               navigate(\"users\");\n//             }}\n//           >\n//             <PersonAddIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\n//           </IconButton>\n//           <IconButton\n//             onClick={() => {\n//               navigate(\"groups\");\n//             }}\n//           >\n//             <GroupAddIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\n//           </IconButton>\n//           <IconButton\n//             onClick={() => {\n//               navigate(\"create-groups\");\n//             }}\n//           >\n//             <AddCircleIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\n//           </IconButton>\n\n//           <IconButton\n//             onClick={() => {\n//               dispatch(toggleTheme());\n//             }}\n//           >\n//             {lightTheme && (\n//               <NightlightIcon\n//                 className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\n//               />\n//             )}\n//             {!lightTheme && (\n//               <LightModeIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\n//             )}\n//           </IconButton>\n//           <IconButton\n//             onClick={() => {\n//               localStorage.removeItem(\"userData\");\n//               navigate(\"/\");\n//             }}\n//           >\n//             <ExitToAppIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\n//           </IconButton>\n//         </div>\n//       </div>\n//       <div className={\"sb-search\" + (lightTheme ? \"\" : \" dark\")}>\n//         <IconButton className={\"icon\" + (lightTheme ? \"\" : \" dark\")}>\n//           <SearchIcon />\n//         </IconButton>\n//         <input\n//           placeholder=\"Search\"\n//           className={\"search-box\" + (lightTheme ? \"\" : \" dark\")}\n//         />\n//       </div>\n//       <div className={\"sb-conversations\" + (lightTheme ? \"\" : \" dark\")}>\n//         {conversations.map((conversation, index) => {\n//           // console.log(\"current convo : \", conversation);\n//           if (conversation.users.length === 1) {\n//             return <div key={index}></div>;\n//           }\n//           if (conversation.latestMessage === undefined) {\n//             // console.log(\"No Latest Message with \", conversation.users[1]);\n//             return (\n//               <div\n//                 key={index}\n//                 onClick={() => {\n//                   console.log(\"Refresh fired from sidebar\");\n//                   // dispatch(refreshSidebarFun());\n//                   setRefresh(!refresh);\n//                 }}\n//               >\n//                 <div\n//                   key={index}\n//                   className=\"conversation-container\"\n//                   onClick={() => {\n//                     navigate(\n//                       \"chat/\" +\n//                       conversation._id +\n//                       \"&\" +\n//                       conversation.users[1].name\n//                     );\n//                   }}\n//                 // dispatch change to refresh so as to update chatArea\n//                 >\n//                   <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\n//                     {conversation.users[1].name[0]}\n//                   </p>\n//                   <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\n//                     {conversation.users[1].name}\n//                   </p>\n\n//                   <p className=\"con-lastMessage\">\n//                     No previous Messages, click here to start a new chat\n//                   </p>\n//                   {/* <p className={\"con-timeStamp\" + (lightTheme ? \"\" : \" dark\")}>\n//                 {conversation.timeStamp}\n//               </p> */}\n//                 </div>\n//               </div>\n//             );\n//           } else {\n//             return (\n//               <div\n//                 key={index}\n//                 className=\"conversation-container\"\n//                 onClick={() => {\n//                   navigate(\n//                     \"chat/\" +\n//                     conversation._id +\n//                     \"&\" +\n//                     conversation.users[1].name\n//                   );\n//                 }}\n//               >\n//                 <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\n//                   {conversation.users[1].name[0]}\n//                 </p>\n//                 <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\n//                   {conversation.users[1].name}\n//                 </p>\n\n//                 <p className=\"con-lastMessage\">\n//                   {conversation.latestMessage.content}\n//                 </p>\n//                 {/* <p className={\"con-timeStamp\" + (lightTheme ? \"\" : \" dark\")}>\n//                 {conversation.timeStamp}\n//               </p> */}\n//               </div>\n//             );\n//           }\n//         })}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Sidebar;\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleTheme } from '../features/themeSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = () => {\n  _s();\n  const dispatch = useDispatch();\n  const mode = useSelector(state => state.theme.mode);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sidebar ${mode}`,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch(toggleTheme()),\n      children: \"Toggle Theme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(Sidebar, \"b8mBQbcUNSlvuYg1JKj59dXjadQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useSelector","useDispatch","toggleTheme","jsxDEV","_jsxDEV","Sidebar","_s","dispatch","mode","state","theme","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Downloads/chat-app/client/src/components/Sidebar.js"],"sourcesContent":["\r\n// import React, { useContext, useEffect, useState } from \"react\";\r\n// import AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\r\n// import { IconButton } from \"@mui/material\";\r\n// import PersonAddIcon from \"@mui/icons-material/PersonAdd\";\r\n// import GroupAddIcon from \"@mui/icons-material/GroupAdd\";\r\n// import NightlightIcon from \"@mui/icons-material/Nightlight\";\r\n// import LightModeIcon from \"@mui/icons-material/LightMode\";\r\n// import ExitToAppIcon from \"@mui/icons-material/ExitToApp\";\r\n// import AddCircleIcon from \"@mui/icons-material/AddCircle\";\r\n// import SearchIcon from \"@mui/icons-material/Search\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { toggleTheme } from \"../features/themeSlice\";\r\n// import axios from \"axios\";\r\n// import { refreshSidebarFun } from \"../features/refreshSidebar\";\r\n// import { myContext } from \"./MainContainer\";\r\n\r\n// function Sidebar() {\r\n//   const navigate = useNavigate();\r\n//   const dispatch = useDispatch();\r\n//   const lightTheme = useSelector((state) => state.themeKey);\r\n//   // const refresh = useSelector((state) => state.refreshKey);\r\n//   const { refresh, setRefresh } = useContext(myContext);\r\n//   console.log(\"Context API : refresh : \", refresh);\r\n//   const [conversations, setConversations] = useState([]);\r\n//   // console.log(\"Conversations of Sidebar : \", conversations);\r\n//   const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n//   // console.log(\"Data from LocalStorage : \", userData);\r\n//   const nav = useNavigate();\r\n//   if (!userData) {\r\n//     console.log(\"User not Authenticated\");\r\n//     nav(\"/\");\r\n//   }\r\n\r\n//   const user = userData.data;\r\n//   useEffect(() => {\r\n//     // console.log(\"Sidebar : \", user.token);\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${user.token}`,\r\n//       },\r\n//     };\r\n\r\n//     axios.get(\"http://localhost:8080/chat/\", config).then((response) => {\r\n//       console.log(\"Data refresh in sidebar \", response.data);\r\n//       setConversations(response.data);\r\n//       // setRefresh(!refresh);\r\n//     });\r\n//   }, [refresh]);\r\n\r\n//   return (\r\n//     <div className=\"sidebar-container\">\r\n//       <div className={\"sb-header\" + (lightTheme ? \"\" : \" dark\")}>\r\n//         <div className=\"other-icons\">\r\n//           <IconButton\r\n//             onClick={() => {\r\n//               nav(\"/app/welcome\");\r\n//             }}\r\n//           >\r\n//             <AccountCircleIcon\r\n//               className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\r\n//             />\r\n//           </IconButton>\r\n\r\n//           <IconButton\r\n//             onClick={() => {\r\n//               navigate(\"users\");\r\n//             }}\r\n//           >\r\n//             <PersonAddIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\r\n//           </IconButton>\r\n//           <IconButton\r\n//             onClick={() => {\r\n//               navigate(\"groups\");\r\n//             }}\r\n//           >\r\n//             <GroupAddIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\r\n//           </IconButton>\r\n//           <IconButton\r\n//             onClick={() => {\r\n//               navigate(\"create-groups\");\r\n//             }}\r\n//           >\r\n//             <AddCircleIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\r\n//           </IconButton>\r\n\r\n//           <IconButton\r\n//             onClick={() => {\r\n//               dispatch(toggleTheme());\r\n//             }}\r\n//           >\r\n//             {lightTheme && (\r\n//               <NightlightIcon\r\n//                 className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\r\n//               />\r\n//             )}\r\n//             {!lightTheme && (\r\n//               <LightModeIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\r\n//             )}\r\n//           </IconButton>\r\n//           <IconButton\r\n//             onClick={() => {\r\n//               localStorage.removeItem(\"userData\");\r\n//               navigate(\"/\");\r\n//             }}\r\n//           >\r\n//             <ExitToAppIcon className={\"icon\" + (lightTheme ? \"\" : \" dark\")} />\r\n//           </IconButton>\r\n//         </div>\r\n//       </div>\r\n//       <div className={\"sb-search\" + (lightTheme ? \"\" : \" dark\")}>\r\n//         <IconButton className={\"icon\" + (lightTheme ? \"\" : \" dark\")}>\r\n//           <SearchIcon />\r\n//         </IconButton>\r\n//         <input\r\n//           placeholder=\"Search\"\r\n//           className={\"search-box\" + (lightTheme ? \"\" : \" dark\")}\r\n//         />\r\n//       </div>\r\n//       <div className={\"sb-conversations\" + (lightTheme ? \"\" : \" dark\")}>\r\n//         {conversations.map((conversation, index) => {\r\n//           // console.log(\"current convo : \", conversation);\r\n//           if (conversation.users.length === 1) {\r\n//             return <div key={index}></div>;\r\n//           }\r\n//           if (conversation.latestMessage === undefined) {\r\n//             // console.log(\"No Latest Message with \", conversation.users[1]);\r\n//             return (\r\n//               <div\r\n//                 key={index}\r\n//                 onClick={() => {\r\n//                   console.log(\"Refresh fired from sidebar\");\r\n//                   // dispatch(refreshSidebarFun());\r\n//                   setRefresh(!refresh);\r\n//                 }}\r\n//               >\r\n//                 <div\r\n//                   key={index}\r\n//                   className=\"conversation-container\"\r\n//                   onClick={() => {\r\n//                     navigate(\r\n//                       \"chat/\" +\r\n//                       conversation._id +\r\n//                       \"&\" +\r\n//                       conversation.users[1].name\r\n//                     );\r\n//                   }}\r\n//                 // dispatch change to refresh so as to update chatArea\r\n//                 >\r\n//                   <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\r\n//                     {conversation.users[1].name[0]}\r\n//                   </p>\r\n//                   <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\r\n//                     {conversation.users[1].name}\r\n//                   </p>\r\n\r\n//                   <p className=\"con-lastMessage\">\r\n//                     No previous Messages, click here to start a new chat\r\n//                   </p>\r\n//                   {/* <p className={\"con-timeStamp\" + (lightTheme ? \"\" : \" dark\")}>\r\n//                 {conversation.timeStamp}\r\n//               </p> */}\r\n//                 </div>\r\n//               </div>\r\n//             );\r\n//           } else {\r\n//             return (\r\n//               <div\r\n//                 key={index}\r\n//                 className=\"conversation-container\"\r\n//                 onClick={() => {\r\n//                   navigate(\r\n//                     \"chat/\" +\r\n//                     conversation._id +\r\n//                     \"&\" +\r\n//                     conversation.users[1].name\r\n//                   );\r\n//                 }}\r\n//               >\r\n//                 <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\r\n//                   {conversation.users[1].name[0]}\r\n//                 </p>\r\n//                 <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\r\n//                   {conversation.users[1].name}\r\n//                 </p>\r\n\r\n//                 <p className=\"con-lastMessage\">\r\n//                   {conversation.latestMessage.content}\r\n//                 </p>\r\n//                 {/* <p className={\"con-timeStamp\" + (lightTheme ? \"\" : \" dark\")}>\r\n//                 {conversation.timeStamp}\r\n//               </p> */}\r\n//               </div>\r\n//             );\r\n//           }\r\n//         })}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Sidebar;\r\n\r\n\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toggleTheme } from '../features/themeSlice';\r\n\r\nconst Sidebar = () => {\r\n  const dispatch = useDispatch();\r\n  const mode = useSelector((state) => state.theme.mode);\r\n\r\n  return (\r\n    <div className={`sidebar ${mode}`}>\r\n      <button onClick={() => dispatch(toggleTheme())}>\r\n        Toggle Theme\r\n      </button>\r\n      {/* Add more sidebar links and functionality */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappingszB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,IAAI,GAAGR,WAAW,CAAES,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACF,IAAI,CAAC;EAErD,oBACEJ,OAAA;IAAKO,SAAS,EAAE,WAAWH,IAAI,EAAG;IAAAI,QAAA,eAChCR,OAAA;MAAQS,OAAO,EAAEA,CAAA,KAAMN,QAAQ,CAACL,WAAW,CAAC,CAAC,CAAE;MAAAU,QAAA,EAAC;IAEhD;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEV,CAAC;AAACX,EAAA,CAZID,OAAO;EAAA,QACMJ,WAAW,EACfD,WAAW;AAAA;AAAAkB,EAAA,GAFpBb,OAAO;AAcb,eAAeA,OAAO;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}