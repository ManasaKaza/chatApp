{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Downloads\\\\chat-app\\\\client\\\\src\\\\components\\\\ChatArea.js\",\n  _s = $RefreshSig$();\n// import React, { useContext, useEffect, useRef, useState } from \"react\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import { IconButton } from \"@mui/material\";\n// import SendIcon from \"@mui/icons-material/Send\";\n// import MessageSelf from \"./MessageSelf\";\n// import MessageOthers from \"./MessageOthers\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { useParams } from \"react-router-dom\";\n// import Skeleton from \"@mui/material/Skeleton\";\n// import axios from \"axios\";\n// import { myContext } from \"./MainContainer\";\n// import { io } from \"socket.io-client\";\n\n// const ENDPOINT = \"http://localhost:8080\";\n\n// var socket, chat;\n// function ChatArea() {\n//   const lightTheme = useSelector((state) => state.themeKey);\n//   const [messageContent, setMessageContent] = useState(\"\");\n//   // const messagesEndRef = useRef(null);\n//   const dyParams = useParams();\n//   const [chat_id, chat_user] = dyParams._id.split(\"&\");\n//   // console.log(chat_id, chat_user);\n//   const userData = JSON.parse(localStorage.getItem(\"userData\"));\n//   const [allMessages, setAllMessages] = useState([]);\n//   const [ allMessagesCopy, setAllMessagesCopy ] = useState([]);\n//   // console.log(\"Chat area id : \", chat_id._id);\n//   // const refresh = useSelector((state) => state.refreshKey);\n//   const { refresh, setRefresh } = useContext(myContext);\n//   const [loaded, setloaded] = useState(false);\n//   const [ socketConnectionStatus, setConnectionStatus ] = useState(false);\n//   const sendMessage = () => {\n//     // console.log(\"SendMessage Fired to\", chat_id._id);\n//     var data = null;\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userData.data.token}`,\n//       },\n//     };\n//     axios\n//       .post(\n//         \"http://localhost:8080/message/\",\n//         {\n//           content: messageContent,\n//           chatId: chat_id,\n//         },\n//         config\n//       )\n//       .then(({ response }) => {\n//         data = response;\n//         console.log(\"Message Fired\");\n//       });\n//       socket.emit(\"newMessage\", data);\n//   };\n//   // const scrollToBottom = () => {\n//   //   messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//   // };\n\n//   useEffect(() => {\n//     socket = io(ENDPOINT);\n//     socket.emit(\"setup\", userData);\n//     socket.on(\"connection\", () => {\n//       setConnectionStatus(!socketConnectionStatus);\n//     });\n//   }, []);\n\n//   useEffect(() => {\n//     socket.on(\"message recieved\", (newMessage) => {\n//       if (!allMessagesCopy || allMessagesCopy._id !== newMessage._id) {\n//         //setAllMessages([..allMessages], newMessage);\n//       } else {\n//         setAllMessages([...allMessages], newMessage);\n//       }\n//     })\n//   })\n\n//   useEffect(() => {\n//     // console.log(\"Users refreshed\");\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userData.data.token}`,\n//       },\n//     };\n//     axios\n//       .get(\"http://localhost:8080/message/\" + chat_id, config)\n//       .then(({ data }) => {\n//         setAllMessages(data);\n//         setloaded(true);\n//         socket.emit(\"join chat\", chat_id);\n//         // console.log(\"Data from Acess Chat API \", data);\n//       });\n//       setAllMessagesCopy(allMessages)\n//     // scrollToBottom();\n//   }, [refresh, chat_id, userData.data.token, allMessages]);\n\n//   if (!loaded) {\n//     return (\n//       <div\n//         style={{\n//           border: \"20px\",\n//           padding: \"10px\",\n//           width: \"100%\",\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           gap: \"10px\",\n//         }}\n//       >\n//         <Skeleton\n//           variant=\"rectangular\"\n//           sx={{ width: \"100%\", borderRadius: \"10px\" }}\n//           height={60}\n//         />\n//         <Skeleton\n//           variant=\"rectangular\"\n//           sx={{\n//             width: \"100%\",\n//             borderRadius: \"10px\",\n//             flexGrow: \"1\",\n//           }}\n//         />\n//         <Skeleton\n//           variant=\"rectangular\"\n//           sx={{ width: \"100%\", borderRadius: \"10px\" }}\n//           height={60}\n//         />\n//       </div>\n//     );\n//   } else {\n//     return (\n//       <div className={\"chatArea-container\" + (lightTheme ? \"\" : \" dark\")}>\n//         <div className={\"chatArea-header\" + (lightTheme ? \"\" : \" dark\")}>\n//           <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\n//             {chat_user[0]}\n//           </p>\n//           <div className={\"header-text\" + (lightTheme ? \"\" : \" dark\")}>\n//             <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\n//               {chat_user}\n//             </p>\n//             {/* <p className={\"con-timeStamp\" + (lightTheme ? \"\" : \" dark\")}>\n//               {props.timeStamp}\n//             </p> */}\n//           </div>\n//           <IconButton className={\"icon\" + (lightTheme ? \"\" : \" dark\")}>\n//             <DeleteIcon />\n//           </IconButton>\n//         </div>\n//         <div className={\"messages-container\" + (lightTheme ? \"\" : \" dark\")}>\n//           {allMessages\n//             .slice(0)\n//             .reverse()\n//             .map((message, index) => {\n//               const sender = message.sender;\n//               const self_id = userData.data._id;\n//               if (sender._id === self_id) {\n//                 // console.log(\"I sent it \");\n//                 return <MessageSelf props={message} key={index} />;\n//               } else {\n//                 // console.log(\"Someone Sent it\");\n//                 return <MessageOthers props={message} key={index} />;\n//               }\n//             })}\n//         </div>\n//         <div className=\"BOTTOM\" />\n//         <div className={\"text-input-area\" + (lightTheme ? \"\" : \" dark\")}>\n//           <input\n//             placeholder=\"Type a Message\"\n//             className={\"search-box\" + (lightTheme ? \"\" : \" dark\")}\n//             value={messageContent}\n//             onChange={(e) => {\n//               setMessageContent(e.target.value);\n//             }}\n//             onKeyDown={(event) => {\n//               if (event.code == \"Enter\") {\n//                 // console.log(event);\n//                 sendMessage();\n//                 setMessageContent(\"\");\n//                 setRefresh(!refresh);\n//               }\n//             }}\n//           />\n//           <IconButton\n//             className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\n//             onClick={() => {\n//               sendMessage();\n//               setRefresh(!refresh);\n//             }}\n//           >\n//             <SendIcon />\n//           </IconButton>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default ChatArea;\n\nimport React, { useState } from 'react';\nimport { useSendMessageMutation } from '../apislice';\nimport MessageOthers from './MessageOthers';\nimport MessageSelf from './MessageSelf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatArea = ({\n  chats\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [sendMessage] = useSendMessageMutation();\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!message) return;\n    try {\n      await sendMessage({\n        content: message,\n        chatId: chats[0]._id\n      }).unwrap();\n      setMessage('');\n    } catch (error) {\n      console.error('Failed to send message: ', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: chats[0].messages.map(msg => msg.sender === localStorage.getItem('userId') ? /*#__PURE__*/_jsxDEV(MessageSelf, {\n        message: msg\n      }, msg._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(MessageOthers, {\n        message: msg\n      }, msg._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatArea, \"crf4yuo1d3PPkHVyZGVCpbilA44=\", false, function () {\n  return [useSendMessageMutation];\n});\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useState","useSendMessageMutation","MessageOthers","MessageSelf","jsxDEV","_jsxDEV","ChatArea","chats","_s","message","setMessage","sendMessage","handleSendMessage","e","preventDefault","content","chatId","_id","unwrap","error","console","className","children","messages","map","msg","sender","localStorage","getItem","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Downloads/chat-app/client/src/components/ChatArea.js"],"sourcesContent":["// import React, { useContext, useEffect, useRef, useState } from \"react\";\r\n// import DeleteIcon from \"@mui/icons-material/Delete\";\r\n// import { IconButton } from \"@mui/material\";\r\n// import SendIcon from \"@mui/icons-material/Send\";\r\n// import MessageSelf from \"./MessageSelf\";\r\n// import MessageOthers from \"./MessageOthers\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import Skeleton from \"@mui/material/Skeleton\";\r\n// import axios from \"axios\";\r\n// import { myContext } from \"./MainContainer\";\r\n// import { io } from \"socket.io-client\";\r\n\r\n// const ENDPOINT = \"http://localhost:8080\";\r\n\r\n// var socket, chat;\r\n// function ChatArea() {\r\n//   const lightTheme = useSelector((state) => state.themeKey);\r\n//   const [messageContent, setMessageContent] = useState(\"\");\r\n//   // const messagesEndRef = useRef(null);\r\n//   const dyParams = useParams();\r\n//   const [chat_id, chat_user] = dyParams._id.split(\"&\");\r\n//   // console.log(chat_id, chat_user);\r\n//   const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n//   const [allMessages, setAllMessages] = useState([]);\r\n//   const [ allMessagesCopy, setAllMessagesCopy ] = useState([]);\r\n//   // console.log(\"Chat area id : \", chat_id._id);\r\n//   // const refresh = useSelector((state) => state.refreshKey);\r\n//   const { refresh, setRefresh } = useContext(myContext);\r\n//   const [loaded, setloaded] = useState(false);\r\n//   const [ socketConnectionStatus, setConnectionStatus ] = useState(false);\r\n//   const sendMessage = () => {\r\n//     // console.log(\"SendMessage Fired to\", chat_id._id);\r\n//     var data = null;\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userData.data.token}`,\r\n//       },\r\n//     };\r\n//     axios\r\n//       .post(\r\n//         \"http://localhost:8080/message/\",\r\n//         {\r\n//           content: messageContent,\r\n//           chatId: chat_id,\r\n//         },\r\n//         config\r\n//       )\r\n//       .then(({ response }) => {\r\n//         data = response;\r\n//         console.log(\"Message Fired\");\r\n//       });\r\n//       socket.emit(\"newMessage\", data);\r\n//   };\r\n//   // const scrollToBottom = () => {\r\n//   //   messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//   // };\r\n\r\n//   useEffect(() => {\r\n//     socket = io(ENDPOINT);\r\n//     socket.emit(\"setup\", userData);\r\n//     socket.on(\"connection\", () => {\r\n//       setConnectionStatus(!socketConnectionStatus);\r\n//     });\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     socket.on(\"message recieved\", (newMessage) => {\r\n//       if (!allMessagesCopy || allMessagesCopy._id !== newMessage._id) {\r\n//         //setAllMessages([..allMessages], newMessage);\r\n//       } else {\r\n//         setAllMessages([...allMessages], newMessage);\r\n//       }\r\n//     })\r\n//   })\r\n\r\n//   useEffect(() => {\r\n//     // console.log(\"Users refreshed\");\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userData.data.token}`,\r\n//       },\r\n//     };\r\n//     axios\r\n//       .get(\"http://localhost:8080/message/\" + chat_id, config)\r\n//       .then(({ data }) => {\r\n//         setAllMessages(data);\r\n//         setloaded(true);\r\n//         socket.emit(\"join chat\", chat_id);\r\n//         // console.log(\"Data from Acess Chat API \", data);\r\n//       });\r\n//       setAllMessagesCopy(allMessages)\r\n//     // scrollToBottom();\r\n//   }, [refresh, chat_id, userData.data.token, allMessages]);\r\n\r\n//   if (!loaded) {\r\n//     return (\r\n//       <div\r\n//         style={{\r\n//           border: \"20px\",\r\n//           padding: \"10px\",\r\n//           width: \"100%\",\r\n//           display: \"flex\",\r\n//           flexDirection: \"column\",\r\n//           gap: \"10px\",\r\n//         }}\r\n//       >\r\n//         <Skeleton\r\n//           variant=\"rectangular\"\r\n//           sx={{ width: \"100%\", borderRadius: \"10px\" }}\r\n//           height={60}\r\n//         />\r\n//         <Skeleton\r\n//           variant=\"rectangular\"\r\n//           sx={{\r\n//             width: \"100%\",\r\n//             borderRadius: \"10px\",\r\n//             flexGrow: \"1\",\r\n//           }}\r\n//         />\r\n//         <Skeleton\r\n//           variant=\"rectangular\"\r\n//           sx={{ width: \"100%\", borderRadius: \"10px\" }}\r\n//           height={60}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   } else {\r\n//     return (\r\n//       <div className={\"chatArea-container\" + (lightTheme ? \"\" : \" dark\")}>\r\n//         <div className={\"chatArea-header\" + (lightTheme ? \"\" : \" dark\")}>\r\n//           <p className={\"con-icon\" + (lightTheme ? \"\" : \" dark\")}>\r\n//             {chat_user[0]}\r\n//           </p>\r\n//           <div className={\"header-text\" + (lightTheme ? \"\" : \" dark\")}>\r\n//             <p className={\"con-title\" + (lightTheme ? \"\" : \" dark\")}>\r\n//               {chat_user}\r\n//             </p>\r\n//             {/* <p className={\"con-timeStamp\" + (lightTheme ? \"\" : \" dark\")}>\r\n//               {props.timeStamp}\r\n//             </p> */}\r\n//           </div>\r\n//           <IconButton className={\"icon\" + (lightTheme ? \"\" : \" dark\")}>\r\n//             <DeleteIcon />\r\n//           </IconButton>\r\n//         </div>\r\n//         <div className={\"messages-container\" + (lightTheme ? \"\" : \" dark\")}>\r\n//           {allMessages\r\n//             .slice(0)\r\n//             .reverse()\r\n//             .map((message, index) => {\r\n//               const sender = message.sender;\r\n//               const self_id = userData.data._id;\r\n//               if (sender._id === self_id) {\r\n//                 // console.log(\"I sent it \");\r\n//                 return <MessageSelf props={message} key={index} />;\r\n//               } else {\r\n//                 // console.log(\"Someone Sent it\");\r\n//                 return <MessageOthers props={message} key={index} />;\r\n//               }\r\n//             })}\r\n//         </div>\r\n//         <div className=\"BOTTOM\" />\r\n//         <div className={\"text-input-area\" + (lightTheme ? \"\" : \" dark\")}>\r\n//           <input\r\n//             placeholder=\"Type a Message\"\r\n//             className={\"search-box\" + (lightTheme ? \"\" : \" dark\")}\r\n//             value={messageContent}\r\n//             onChange={(e) => {\r\n//               setMessageContent(e.target.value);\r\n//             }}\r\n//             onKeyDown={(event) => {\r\n//               if (event.code == \"Enter\") {\r\n//                 // console.log(event);\r\n//                 sendMessage();\r\n//                 setMessageContent(\"\");\r\n//                 setRefresh(!refresh);\r\n//               }\r\n//             }}\r\n//           />\r\n//           <IconButton\r\n//             className={\"icon\" + (lightTheme ? \"\" : \" dark\")}\r\n//             onClick={() => {\r\n//               sendMessage();\r\n//               setRefresh(!refresh);\r\n//             }}\r\n//           >\r\n//             <SendIcon />\r\n//           </IconButton>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ChatArea;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useSendMessageMutation } from '../apislice';\r\nimport MessageOthers from './MessageOthers';\r\nimport MessageSelf from './MessageSelf';\r\n\r\nconst ChatArea = ({ chats }) => {\r\n  const [message, setMessage] = useState('');\r\n  const [sendMessage] = useSendMessageMutation();\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!message) return;\r\n\r\n    try {\r\n      await sendMessage({ content: message, chatId: chats[0]._id }).unwrap();\r\n      setMessage('');\r\n    } catch (error) {\r\n      console.error('Failed to send message: ', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-area\">\r\n      <div className=\"messages\">\r\n        {chats[0].messages.map((msg) =>\r\n          msg.sender === localStorage.getItem('userId') ? (\r\n            <MessageSelf key={msg._id} message={msg} />\r\n          ) : (\r\n            <MessageOthers key={msg._id} message={msg} />\r\n          )\r\n        )}\r\n      </div>\r\n      <form onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatArea;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,sBAAsB,QAAQ,aAAa;AACpD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,WAAW,CAAC,GAAGV,sBAAsB,CAAC,CAAC;EAE9C,MAAMW,iBAAiB,GAAG,MAAOC,CAAC,IAAK;IACrCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACL,OAAO,EAAE;IAEd,IAAI;MACF,MAAME,WAAW,CAAC;QAAEI,OAAO,EAAEN,OAAO;QAAEO,MAAM,EAAET,KAAK,CAAC,CAAC,CAAC,CAACU;MAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;MACtER,UAAU,CAAC,EAAE,CAAC;IAChB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,oBACEd,OAAA;IAAKgB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBjB,OAAA;MAAKgB,SAAS,EAAC,UAAU;MAAAC,QAAA,EACtBf,KAAK,CAAC,CAAC,CAAC,CAACgB,QAAQ,CAACC,GAAG,CAAEC,GAAG,IACzBA,GAAG,CAACC,MAAM,KAAKC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,gBAC3CvB,OAAA,CAACF,WAAW;QAAeM,OAAO,EAAEgB;MAAI,GAAtBA,GAAG,CAACR,GAAG;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAAC,gBAE3C3B,OAAA,CAACH,aAAa;QAAeO,OAAO,EAAEgB;MAAI,GAAtBA,GAAG,CAACR,GAAG;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAEhD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACN3B,OAAA;MAAM4B,QAAQ,EAAErB,iBAAkB;MAAAU,QAAA,gBAChCjB,OAAA;QACE6B,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,gBAAgB;QAC5BC,KAAK,EAAE3B,OAAQ;QACf4B,QAAQ,EAAGxB,CAAC,IAAKH,UAAU,CAACG,CAAC,CAACyB,MAAM,CAACF,KAAK;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACF3B,OAAA;QAAQ6B,IAAI,EAAC,QAAQ;QAAAZ,QAAA,EAAC;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACxB,EAAA,CAtCIF,QAAQ;EAAA,QAEUL,sBAAsB;AAAA;AAAAsC,EAAA,GAFxCjC,QAAQ;AAwCd,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}